// https://leetcode.com/problems/binary-tree-right-side-view/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 

/*
Use of level order traversal - take extreme element of each level
*/
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int> res;
      if(root == nullptr)
      return res;
        queue<pair<TreeNode*,int>> q;
        q.push(make_pair(root,0));
        TreeNode* lastNode = root;
        int last_level = 0;

        while(!q.empty())
        {
            TreeNode* node = q.front().first;
        int level = q.front().second;
        q.pop();
        if(last_level!=level)
        {
            res.push_back(lastNode->val);
            last_level = level;     

        }
        lastNode = node;
        if(node->left)
        q.push(make_pair(node->left,level+1));
         if(node->right)
        q.push(make_pair(node->right,level+1));
            
        }

        res.push_back(lastNode->val);

        return res;
        
    }
};
