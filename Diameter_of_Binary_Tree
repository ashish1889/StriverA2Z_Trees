//https://leetcode.com/problems/diameter-of-binary-tree/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int height(TreeNode* node)
    {
        if(node == nullptr)
        return 0;
        return (1+max(height(node->left),height(node->right)));
    }
    int diameterOfBinaryTree(TreeNode* root) {
        if(root == nullptr)
        return 0;
        //here we are considering root or current node in taking diameter of binary tree
        int h =  height(root->left)+height(root->right);
       //here we are considering left child subtree of current node for taking diameter of binary tree
       int d1 = diameterOfBinaryTree(root->left);
      //here we are considering right child subtree of current node for taking diameter of binary tree
       int d2 = diameterOfBinaryTree(root->right);
     // max of h1, d1 and d2 is returned as result
       return max(h,max(d1,d2));
        
    }
};
